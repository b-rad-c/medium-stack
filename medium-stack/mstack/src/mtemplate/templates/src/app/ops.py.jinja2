import os

from mcore.ops import MCoreOps
from mcore.models import *
from {{ package_name }}.models import *

__all__ = [
    '{{ env_var_prefix }}_SDK_DEFAULT_LIST_OFFSET',
    '{{ env_var_prefix }}_SDK_DEFAULT_LIST_SIZE',
    '{{ ops_class_name }}'
]

{{ env_var_prefix }}_SDK_DEFAULT_LIST_OFFSET = os.environ.get('{{ env_var_prefix }}_SDK_DEFAULT_LIST_OFFSET', 0)
{{ env_var_prefix }}_SDK_DEFAULT_LIST_SIZE = os.environ.get('{{ env_var_prefix }}_SDK_DEFAULT_LIST_SIZE', 50)

class {{ ops_class_name }}(MCoreOps):
{% for model in models %}
    # {{ model.lower_case }}

    def create_{{ model.snake_case }}(self, creator:{{ model.type }}Creator, user_cid:UserCid) -> {{ model.type }}:
        {{ model.snake_case }}:{{ model.type }} = creator.create_model(user_cid=user_cid)
        self.db.create({{ model.snake_case }})
        return {{ model.snake_case }}
    
    def list_{{ model.snake_case }}(self, offset:int={{ env_var_prefix }}_SDK_DEFAULT_LIST_OFFSET, size:int={{ env_var_prefix }}_SDK_DEFAULT_LIST_SIZE) -> list[{{ model.type }}]:
        return list(self.db.find({{ model.type }}, offset=offset, size=size))
    
    def read_{{ model.snake_case }}(self, {{ model.snake_case }}:{{ model.type }} | {{ model.type }}Cid) -> {{ model.type }}:
        try:
            cid = {{ model.snake_case }}.cid
        except AttributeError:
            cid = {{ model.snake_case }}
        return self.db.read({{ model.type }}, cid=cid)
    
    def delete_{{ model.snake_case }}(self, {{ model.snake_case }}: {{ model.type }} | {{ model.type }}Cid) -> None:
        try:
            cid = {{ model.snake_case }}.cid
        except AttributeError:
            cid = {{ model.snake_case }}
        self.db.delete({{ model.type }}, cid=cid)
{% endfor %}